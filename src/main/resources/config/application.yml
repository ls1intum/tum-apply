# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

---
# Conditionally disable springdoc on missing api-docs profile
spring:
  autoconfigure:
    exclude:
      # We can exclude this autoconfiguration. Using standard SpringDocs is fine and when excluding this, we avoid coupling OpenAPI specs to a profile
      - tech.jhipster.config.apidoc.JHipsterSpringDocAutoConfiguration
springdoc:
  api-docs:
    path: /api-docs
    # Having these endpoints publicly available is a security risk, so we disable them by default
    enabled: false
  default-produces-media-type: application/json
---
management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include:
          - configprops
          - env
          - health
          - info
          - jhimetrics
          - jhiopenapigroups
          - logfile
          - loggers
          - prometheus
          - threaddump
          - caches
          - liquibase
  endpoint:
    health:
      show-details: when_authorized
      roles: 'ROLE_ADMIN'
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState,db
    jhimetrics:
      enabled: true
  info:
    git:
      mode: full
    env:
      enabled: true
  health:
    mail:
      enabled: false # When using the MailService, configure an SMTP server and set this to true
  prometheus:
    metrics:
      export:
        enabled: true
        step: 60
  observations:
    key-values:
      application: ${spring.application.name}
  metrics:
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    data:
      repository:
        autotime:
          enabled: true
    tags:
      application: ${spring.application.name}

spring:
  application:
    name: TUMApply
  docker:
    compose:
      enabled: true
      lifecycle-management: start-only
      file: src/main/docker/services.yml
  profiles:
    # The commented value for `active` can be replaced with valid Spring profiles to load.
    # Otherwise, it will be filled in by gradle when building the JAR file
    # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
    active: '@spring.profiles.active@'
    group:
      dev:
        - dev
        - api-docs
        # Uncomment to activate TLS for the dev profile
        #- tls
  jmx:
    enabled: false
  data:
    jpa:
      repositories:
        bootstrap-mode: deferred
  jpa:
    open-in-view: false
    properties:
      hibernate.type.preferred_uuid_jdbc_type: CHAR
      hibernate.jdbc.time_zone: UTC
      hibernate.timezone.default_storage: NORMALIZE
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.cache.use_second_level_cache: true
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
      # modify batch size as necessary
      hibernate.jdbc.batch_size: 25
      hibernate.order_inserts: true
      hibernate.order_updates: true
      hibernate.query.fail_on_pagination_over_collection_fetch: true
      hibernate.query.in_clause_parameter_padding: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
  datasource:
    # JDBC URL for the main datasource connection
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/tumapply?useUnicode=true&characterEncoding=utf8&useSSL=false&createDatabaseIfNotExist=true&serverTimezone=UTC&allowPublicKeyRetrieval=true}
    # Username for connecting to MySQL
    username: ${SPRING_DATASOURCE_USERNAME:root}
    # Password for connecting to MySQL
    password: ${SPRING_DATASOURCE_PASSWORD:}
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      pool-name: Hikari
      auto-commit: false
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
  liquibase:
    # JDBC URL used by Liquibase for database migrations
    url: ${SPRING_LIQUIBASE_URL:jdbc:mysql://localhost:3306/tumapply?useUnicode=true&characterEncoding=utf8&useSSL=false&createDatabaseIfNotExist=true&serverTimezone=UTC&allowPublicKeyRetrieval=true}
    user: ${SPRING_LIQUIBASE_USERNAME:${SPRING_DATASOURCE_USERNAME:root}}
    password: ${SPRING_LIQUIBASE_PASSWORD:${SPRING_DATASOURCE_PASSWORD:}}
  messages:
    basename: i18n/messages
  main:
    allow-bean-definition-overriding: true
  mvc:
    problemdetails:
      enabled: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${keycloak.url}/realms/${keycloak.realm}
  task:
    execution:
      thread-name-prefix: tum-apply-task-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: tum-apply-scheduling-
      pool:
        size: 2
  thymeleaf:
    mode: HTML
  output:
    ansi:
      console-available: true

  freemarker:
    enabled: true
    template-loader-path: classpath:/templates/
    suffix: .ftl
    charset: UTF-8
    cache: false # disable for development

server:
  servlet:
    session:
      cookie:
        http-only: true
        secure: true
        same-site: Strict

springdoc:
  show-actuator: true

# Properties to be exposed on the /info management endpoint
info:
  # Comma separated list of profiles that will trigger the ribbon to show
  display-ribbon-on-profiles: 'dev'

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  clientApp:
    name: 'tumApplyApp'
  # By default CORS is disabled. Uncomment to enable.
  # cors:
  #   allowed-origins: "http://localhost:8100,http://localhost:9000"
  #   allowed-methods: "*"
  #   allowed-headers: "*"
  #   exposed-headers: "Authorization,Link,X-Total-Count,X-${jhipster.clientApp.name}-alert,X-${jhipster.clientApp.name}-error,X-${jhipster.clientApp.name}-params"
  #   allow-credentials: true
  #   max-age: 1800
  mail:
    from: TUMApply@localhost
  api-docs:
    default-include-pattern: /api/**
    management-include-pattern: /management/**
    title: TUM Apply API
    description: TUM Apply API documentation
    version: 0.0.1
    terms-of-service-url:
    contact-name:
    contact-url:
    contact-email:
    license: unlicensed
    license-url:
  security:
    content-security-policy: "default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:"
    oauth2:
      audience:
        - account
        - api://default
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      ring-buffer-size: 512
  cache: # Cache configuration
    caffeine: # Caffeine configuration
      time-to-live-seconds: 3600 # By default objects stay 1 hour in the cache. This sets expireAfterWrite in Caffeine (https://github.com/ben-manes/caffeine/wiki/Eviction#time-based)

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# Application specific properties:
aet:
  email:
    enabled: ${AET_EMAIL_ENABLED:false}
    from: ${AET_EMAIL_FROM:tum-apply.aet@xcit.tum.de}
  storage:
    root: ${AET_STORAGE_ROOT:storage/docs}
    max-size-bytes: 26214400
  download:
    deterministic-zip: false
  client:
    # Base URL of the client used in emails to generate links
    url: ${AET_CLIENT_URL:http://localhost:4200}
# Application environment label (e.g., test, production)
environment: ${ENVIRONMENT:test}
# Current application version (used for build metadata)
version: ${VERSION:1.0.1}
# Enable or disable debug mode (true/false)
debug: ${DEBUG:false}

keycloak:
  url: ${KEYCLOAK_URL:http://localhost:9080}
  realm: ${KEYCLOAK_REALM:tumapply}
  # Client ID used by the browser/client application to authenticate with Keycloak
  client-id: ${KEYCLOAK_CLIENT_ID:tumapply-client}
  # Admin user to create initial users in Keycloak
  users:
    admin:
      username: ${KEYCLOAK_USERS_ADMIN_USERNAME:admin}
      password: ${KEYCLOAK_USERS_ADMIN_PASSWORD:admin}
  server:
    # Client ID used by the server to authenticate with Keycloak
    client-id: ${KEYCLOAK_SERVER_CLIENT_ID:tumapply-server-client}
    # Secret used by the server to authenticate securely with Keycloak
    client-secret: ${KEYCLOAK_SERVER_CLIENT_SECRET:tumapply-server-secret}
  admin:
    # Admin service-account client used by the server for Keycloak Admin API calls (create users, set emailVerified, backchannel logout)
    client-id: ${KEYCLOAK_ADMIN_CLIENT_ID:tumapply-otp-admin}
    # Secret for the admin client; generate in Keycloak → Clients → tumapply-otp-admin → Credentials
    client-secret: ${KEYCLOAK_ADMIN_CLIENT_SECRET:tumapply-otp-secret}

# ===================================================================
# OTP (One-Time Password) / Email Verification settings
# - length: number of digits/characters for the generated OTP code
# - ttl-seconds: validity period of the OTP in seconds
# - max-attempts: how many verification attempts are allowed before invalidation
# - resend-cooldown-seconds: minimum time in seconds before another code can be requested
# - hmac-secret: Base64 encoded secret used for secure HMAC hashing of the OTP
# ===================================================================

security:
  otp:
    length: ${OTP_LENGTH:8}
    ttl-seconds: ${OTP_TTL_SECONDS:900}
    max-attempts: ${OTP_MAX_ATTEMPTS:6}
    resend-cooldown-seconds: ${OTP_RESEND_COOLDOWN_SECONDS:60}
    hmac-secret: ${OTP_HMAC_SECRET:3vWK1lE1FnrjAovOmWwn8O9xqq5WTtNOY/NUdSAKmoQ=}
