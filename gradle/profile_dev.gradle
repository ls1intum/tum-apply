dependencies {
  implementation "com.mysql:mysql-connector-j:${mysqlVersion}"
  testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
}

ext {
  springProfiles = "dev" + springProfiles
}

springBoot {
  buildInfo {
    excludes = ['time']
  }
}

bootRun {
  args = ["--spring.profiles.active=${springProfiles}"]
}

task webapp(type: NpmTask) {
  inputs.property('appVersion', project.version)
  inputs.files("build.gradle")
    .withPropertyName('build.gradle')
    .withPathSensitivity(PathSensitivity.RELATIVE)
  inputs.files('angular.json', 'package-lock.json', 'package.json', 'tsconfig.app.json', 'tsconfig.json')
    .withPropertyName('angular-build')
    .withPathSensitivity(PathSensitivity.RELATIVE)
  inputs.dir("src/main/webapp/")
    .withPropertyName("src/main/webapp/")
    .withPathSensitivity(PathSensitivity.RELATIVE)
  outputs.dir("build/resources/main/static/")
    .withPropertyName("webapp-build-dir")

  dependsOn npmInstall

  args = ["run", "webapp:build"]
}

processResources {
  inputs.property('version', version)
  inputs.property('springProfiles', springProfiles)
  filesMatching("**/application.yml") {
    filter {
      it.replace("@project.version@", version)
    }
    filter {
      it.replace("@spring.profiles.active@", springProfiles)
    }
  }
}

tasks.register("integrationTest", Test) {
  maxHeapSize = "1G"
  useJUnitPlatform()
  description = "Execute integration tests."
  group = "verification"
  include "**/*IT*", "**/*IntTest*"
  testLogging {
    events = ['FAILED', 'SKIPPED']
    exceptionFormat = "full"
  }
  systemProperty('spring.profiles.active', 'test,testdev')
  systemProperty('java.security.egd', 'file:/dev/./urandom')
  // uncomment if the tests reports are not generated
  // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
  // ignoreFailures true
  reports {
    html.required.set(false)
  }
}
integrationTest.dependsOn test

processResources.dependsOn webapp
bootJar.dependsOn processResources
