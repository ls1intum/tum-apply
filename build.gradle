import com.gorylenko.GenerateGitPropertiesTask

// This section is required so that the latest version of the liquibase gradle plugin works
buildscript {
  dependencies {
    classpath "org.liquibase:liquibase-core:${liquibaseVersion}"
  }
}

plugins {
  id "checkstyle"
  id "idea"
  id "java"
  id "jacoco"
  id "com.diffplug.spotless" version "7.2.1"
  //id "com.github.andygoossens.modernizer" version "${modernizerPluginVersion}"
  id "com.github.ben-manes.versions" version "0.52.0"
  id "com.github.node-gradle.node" version "${gradleNodePluginVersion}"
  id "com.google.cloud.tools.jib" version "3.4.5"
  id "com.gorylenko.gradle-git-properties" version "${gitPropertiesPluginVersion}"
  id "io.spring.dependency-management" version "1.1.7"
  id "org.liquibase.gradle" version "${liquibasePluginVersion}"
  id "org.sonarqube" version "6.3.1.5724"
  id "org.springframework.boot" version "${springBootVersion}"
  id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
  // TODO: we cannot upgrade to the latest version yet, because of liquibase and openapi errors
  id "org.openapi.generator" version "7.12.0"
}

group = "de.tum.cit.aet"
version = "1.0.2"

description = "Modern portal for streamlined, inclusive, and transparent doctoral applications at TUM"

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(25)

  }
}

ext {
  springProfiles = ""
}

wrapper {
  gradleVersion = "9.1.0"
}

spotless {
  java {
    target "src/*/java/**/*.java"
    // removeUnusedImports()
  }
}

apply from: "gradle/openapi.gradle"
apply from: "gradle/liquibase.gradle"

if (project.hasProperty("prod")) {
  apply from: "gradle/profile_prod.gradle"
} else {
  apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
  apply from: "gradle/war.gradle"
}

tasks.register("npmSetCacheDockerfile", NpmTask) {
  args = ["set", "cache", "/opt/tum-apply/.npm"]
}

idea {
  module {
    excludeDirs += files("node_modules")
  }
}

defaultTasks "bootRun"

springBoot {
  mainClass = "de.tum.cit.aet.TumApplyApp"
}

test {
  useJUnitPlatform()
  exclude "**/*IT*", "**/*IntTest*"
  testLogging {
    events "FAILED", "SKIPPED"
  }
  jvmArgs += "-Djava.security.egd=file:/dev/./urandom -Xmx512m"
  testClassesDirs = testing.suites.test.sources.output.classesDirs
  classpath = testing.suites.test.sources.runtimeClasspath
  reports.html.required = false
}

// Disabled for now as it is not compatible with Java 25 yet
// TODO: enable again once Java 25 is compatible
// https://github.com/andygoossens/gradle-modernizer-plugin/issues/10
/*
modernizer {
  failOnViolations = false
  includeTestClasses = true
  // Copy the rule name as defined in https://github.com/gaul/modernizer-maven-plugin/blob/master/modernizer-maven-plugin/src/main/resources/modernizer.xml to exclude it
  exclusions = ["java/util/Optional.get:()Ljava/lang/Object;"]
}*/

tasks.register("testReport", TestReport) {
  destinationDirectory.set(layout.buildDirectory.dir("reports/tests"))
  testResults.from(tasks.named("test"))
}

tasks.register("integrationTestReport", TestReport) {
  destinationDirectory.set(layout.buildDirectory.dir("reports/tests"))
  testResults.from(tasks.named("integrationTest"))
}

tasks.withType(GenerateGitPropertiesTask).configureEach {
  outputs.doNotCacheIf("Task is always executed") { true }
}

checkstyle {
  // Exclude everything under the build directory
  toolVersion = "${checkstyleVersion}"
  configFile = file("checkstyle.xml")
  checkstyleTest.enabled = false
  maxErrors = 0
}

checkstyleMain.source = "src/main/java"


configurations {
  providedRuntime
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {

  // import JHipster dependencies BOM
  implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")

  implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"

  // Defines low-level streaming API, and includes JSON-specific implementations
  implementation "com.fasterxml.jackson.core:jackson-core:${fasterxml_version}"
  // Contains standard Jackson annotations
  // TODO: change to ${fasterxml_version} in the next standardized version
  implementation "com.fasterxml.jackson.core:jackson-annotations:2.20"
  // Implements data-binding (and object serialization) support
  implementation "com.fasterxml.jackson.core:jackson-databind:${fasterxml_version}"
  // Support for "Java 8 Dates"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${fasterxml_version}"
  // Support JSON serialization and deserialization of Hibernate (https://hibernate.org) specific data types and properties; especially lazy-loading aspects
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6:${fasterxml_version}"
  implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${fasterxml_version}"


  testImplementation("com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}") {
    exclude group: "org.slf4j", module: "slf4j-api"
  }
  testRuntimeOnly("com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}") {
    exclude group: "org.slf4j", module: "slf4j-api"
  }
  implementation "io.micrometer:micrometer-registry-prometheus-simpleclient:1.15.3"
  implementation "jakarta.annotation:jakarta.annotation-api:3.0.0"
  implementation "org.apache.commons:commons-lang3:3.18.0"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
  implementation "org.springframework.boot:spring-boot-loader-tools"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-aop"
  implementation "org.springframework.boot:spring-boot-starter-logging"
  implementation "org.springframework.boot:spring-boot-starter-mail"
  implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
  implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
  implementation "org.springframework.boot:spring-boot-starter-webflux"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
  implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
    exclude module: "spring-boot-starter-undertow"
  }
  implementation "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-validation"
  testImplementation "org.springframework.boot:spring-boot-test"
  testImplementation "org.springframework.security:spring-security-test"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"

  // Consistently use the latest version of spring framework modules the latest version to avoid security vulnerabilities
  implementation "org.springframework:spring-aop:${springFrameworkVersion}"
  implementation "org.springframework:spring-aspects:${springFrameworkVersion}"
  implementation "org.springframework:spring-beans:${springFrameworkVersion}"
  implementation "org.springframework:spring-context:${springFrameworkVersion}"
  implementation "org.springframework:spring-context-support:${springFrameworkVersion}"
  implementation "org.springframework:spring-core:${springFrameworkVersion}"
  implementation "org.springframework:spring-expression:${springFrameworkVersion}"
  implementation "org.springframework:spring-jcl:${springFrameworkVersion}"
  implementation "org.springframework:spring-jdbc:${springFrameworkVersion}"
  implementation "org.springframework:spring-messaging:${springFrameworkVersion}"
  implementation "org.springframework:spring-orm:${springFrameworkVersion}"
  implementation "org.springframework:spring-tx:${springFrameworkVersion}"
  implementation "org.springframework:spring-webmvc:${springFrameworkVersion}"
  implementation "org.springframework:spring-web:${springFrameworkVersion}"
  implementation "org.springframework:spring-webflux:${springFrameworkVersion}"
  implementation "org.springframework:spring-websocket:${springFrameworkVersion}"

  // Consistently use the latest version of all spring security modules to avoid vulnerabilities
  implementation "org.springframework.security:spring-security-config:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-data:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-core:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-oauth2-core:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-oauth2-client:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-oauth2-jose:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-oauth2-resource-server:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-crypto:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-web:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-messaging:${springSecurityVersion}"
  implementation "org.springframework.security:spring-security-ldap:${springSecurityVersion}"
  testImplementation "org.springframework.security:spring-security-test:${springSecurityVersion}"

  implementation "com.mysql:mysql-connector-j:9.4.0"
  implementation "com.zaxxer:HikariCP:7.0.2"

  implementation "tech.jhipster:jhipster-framework:${jhipsterDependenciesVersion}"

  implementation "org.springframework.boot:spring-boot-starter-cache"
  implementation "com.github.ben-manes.caffeine:caffeine:3.2.2"
  implementation "com.github.ben-manes.caffeine:jcache:3.2.2"
  implementation "javax.cache:cache-api"
  implementation "org.hibernate.orm:hibernate-jcache:${hibernateVersion}"
  implementation "org.hibernate.orm:hibernate-core:${hibernateVersion}"
  implementation "org.hibernate.validator:hibernate-validator:9.0.1.Final"


  // needed for OpenAPI generation
  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13"
  implementation("org.yaml:snakeyaml") {
    version {
      strictly "${snakeyaml_version}"
      // needed to reduce the number of vulnerabilities, also see https://mvnrepository.com/artifact/org.yaml/snakeyaml
    }
  }
  runtimeOnly "com.h2database:h2:2.3.232"


  testImplementation "org.testcontainers:jdbc:${testcontainersVersion}"
  testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
  testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
  testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
  annotationProcessor "org.glassfish.jaxb:jaxb-runtime"
  annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateVersion}"
  developmentOnly "org.springframework.boot:spring-boot-docker-compose:${springBootVersion}"
  developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
  testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  // FreeMarker
  implementation "org.springframework.boot:spring-boot-starter-freemarker:${springBootVersion}"

  // Jsoup for sanitizing HTML
  implementation "org.jsoup:jsoup:1.21.2"

  // Spring Retry
  implementation "org.springframework.retry:spring-retry:2.0.12"

  // Keycloak
  implementation "org.keycloak:keycloak-admin-client:${keycloakVersion}"
  implementation "org.keycloak:keycloak-authz-client:${keycloakVersion}"
}

tasks.register("cleanResources", Delete) {
  delete(layout.buildDirectory.dir("resources"))
}

wrapper {
  gradleVersion = "9.1.0"
}

node {
  download = true
  version = "${node_version}"
  npmVersion = "${npm_version}"
}

def isNonStable = { String version ->
  def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  rejectVersionIf {
    isNonStable(it.candidate.version)
  }

  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}


// Available commands:
//
// 1) Build production:                             ./gradlew -Pprod -Pwar clean bootWar
// 2) Execute server integration tests:             ./gradlew integrationTest -x webapp
// 3) Find dependency updates:                      ./gradlew dependencyUpdates -Drevision=release
// 4) Check Java code format:                       ./gradlew spotlessCheck -x webapp
// 5) Apply Java code formatter:                    ./gradlew spotlessApply -x webapp
// 6) Check JavaDoc:                                ./gradlew checkstyleMain -x webapp
// 7) Detects uses of legacy code:                  ./gradlew modernizer -x webapp
