name: Build
# The name of this workflow (Build) should be in sync with the test-e2e.yml workflow's workflow_run listener.

on:
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - 'SECURITY.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/build.yml'
  push:
    branches:
      - main
    tags: '[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
      - 'README.md'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - 'SECURITY.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/build.yml'
  release:
    types:
      - created

# Concurrency control for GitHub Actions workflow
# Ensures efficient use of CI resources by canceling redundant runs where needed.
#
# - Pull requests: Cancel previous runs for the same PR to avoid redundant builds.
#   Example: PR #42 → "build-pr-42"
#
# - Pushes (branches & tags): Each branch or tag runs independently. If a run is in progress for the same branch or tag, it is canceled.
#   Example: Push to "develop" → "build-refs/heads/develop"
#   Example: Push to "release/1.2.3" → "build-refs/heads/release/1.2.3"
#   Example: Tag "v1.2.3" → "build-refs/tags/v1.2.3"
#
# - Releases: Each release runs independently.
#   Example: Release for "v1.2.3" → "build-release-v1.2.3"
#
# - Default fallback: Ensures the workflow always has a concurrency group.
#   Example: Unexpected event type → "build-default"
concurrency:
  group: |
    ${{
      github.event_name == 'pull_request' && format('build-pr-{0}', github.event.pull_request.number) ||
      github.event_name == 'push' && format('build-{0}', github.ref) ||
      github.event_name == 'release' && format('build-release-{0}', github.event.release.tag_name) ||
      'build-default'
    }}
  cancel-in-progress: true

# Keep this filename in sync with the filename environment variable (PR_AUTO_BUILD_FILE_NAME) in the testserver-deployment.yml workflow
# and with the build_workflow_name environment variable in the staging-deployment.yml workflow

# Keep in sync with codeql-analysis.yml and test.yml and analysis-of-endpoint-connections.yml
env:
  CI: true
  node: 22
  java: 21

jobs:
  build:
    name: Build .war artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.node }}'
          cache: 'npm'
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '${{ env.java }}'
          cache: 'gradle'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Production Build
        run: ./gradlew -Pprod -Pwar clean bootWar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tum-apply.war
          path: build/libs/tum-apply-*.war
      - name: Upload Release Artifact
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/libs/tum-apply-${{ github.event.release.tag_name }}.war
          asset_name: tum.war
          asset_content_type: application/x-webarchive
