openapi: 3.1.0
info: {title: OpenAPI definition, version: v0}
servers:
- {url: 'http://localhost:8080', description: Generated server url}
paths:
  /api/admin/research-groups/provision:
    post:
      tags: [admin-resource]
      operationId: provisionResearchGroup
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ResearchGroupProvisionDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ResearchGroup'}
  /api/applications:
    put:
      tags: [application-resource]
      operationId: updateApplication
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/UpdateApplicationDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ApplicationForApplicantDTO'}
  /api/applications/create/{jobId}:
    post:
      tags: [application-resource]
      operationId: createApplication
      parameters:
      - name: jobId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ApplicationForApplicantDTO'}
  /api/applications/delete-document/{documentDictionaryId}:
    delete:
      tags: [application-resource]
      operationId: deleteDocumentFromApplication
      parameters:
      - name: documentDictionaryId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200': {description: OK}
  /api/applications/getDocumentIds/{applicationId}:
    get:
      tags: [application-resource]
      operationId: getDocumentDictionaryIds
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ApplicationDocumentIdsDTO'}
  /api/applications/pages:
    get:
      tags: [application-resource]
      operationId: getApplicationPages
      parameters:
      - name: pageSize
        in: query
        required: false
        schema: {type: integer, format: int32, default: 25, minimum: 1}
      - name: pageNumber
        in: query
        required: false
        schema: {type: integer, format: int32, default: 0, minimum: 0}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ApplicationOverviewDTO'}
  /api/applications/pages/length/{applicantId}:
    get:
      tags: [application-resource]
      operationId: getApplicationPagesLength
      parameters:
      - name: applicantId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {type: integer, format: int64}
  /api/applications/rename-document/{documentDictionaryId}:
    put:
      tags: [application-resource]
      operationId: renameDocument
      parameters:
      - name: documentDictionaryId
        in: path
        required: true
        schema: {type: string, format: uuid}
      - name: newName
        in: query
        required: true
        schema: {type: string}
      responses:
        '200': {description: OK}
  /api/applications/upload-documents/{applicationId}/{documentType}:
    post:
      tags: [application-resource]
      summary: Upload documents
      operationId: uploadDocuments
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      - name: documentType
        in: path
        required: true
        schema:
          type: string
          enum: [BACHELOR_TRANSCRIPT, MASTER_TRANSCRIPT, REFERENCE, CV, CUSTOM]
      requestBody:
        content:
          multipart/form-data:
            schema: {$ref: '#/components/schemas/MultipartUploadRequest'}
          application/json:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items: {type: string, format: binary}
              required: [files]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/DocumentInformationHolderDTO'}
                uniqueItems: true
  /api/applications/withdraw/{applicationId}:
    put:
      tags: [application-resource]
      operationId: withdrawApplication
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200': {description: OK}
  /api/applications/{applicationId}:
    get:
      tags: [application-resource]
      operationId: getApplicationById
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ApplicationForApplicantDTO'}
    delete:
      tags: [application-resource]
      operationId: deleteApplication
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200': {description: OK}
  /api/applications/{applicationId}/comments:
    get:
      tags: [internal-comment-resource]
      operationId: listComments
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/InternalCommentDTO'}
    post:
      tags: [internal-comment-resource]
      operationId: createComment
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/InternalCommentUpdateDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/InternalCommentDTO'}
  /api/applications/{applicationId}/detail:
    get:
      tags: [application-resource]
      operationId: getApplicationForDetailPage
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ApplicationDetailDTO'}
  /api/applications/{applicationId}/ratings:
    get:
      tags: [rating-resource]
      operationId: getRatings
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/RatingOverviewDTO'}
    put:
      tags: [rating-resource]
      operationId: updateRating
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      - name: rating
        in: query
        required: false
        schema: {type: integer, format: int32, maximum: 2, minimum: -2}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/RatingOverviewDTO'}
  /api/auth/login:
    post:
      tags: [authentication-resource]
      operationId: login
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/LoginRequestDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AuthSessionInfoDTO'}
  /api/auth/logout:
    post:
      tags: [authentication-resource]
      operationId: logout
      responses:
        '200': {description: OK}
  /api/auth/otp-complete:
    post:
      tags: [authentication-resource]
      operationId: otpComplete
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OtpCompleteDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AuthSessionInfoDTO'}
  /api/auth/refresh:
    post:
      tags: [authentication-resource]
      operationId: refresh
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AuthSessionInfoDTO'}
  /api/auth/send-code:
    post:
      tags: [email-verification-resource]
      operationId: send
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SendCodeRequest'}
        required: true
      responses:
        '200': {description: OK}
  /api/comments/{commentId}:
    put:
      tags: [internal-comment-resource]
      operationId: updateComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema: {type: string, format: uuid}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/InternalCommentUpdateDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/InternalCommentDTO'}
    delete:
      tags: [internal-comment-resource]
      operationId: deleteComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200': {description: OK}
  /api/documents/{documentDictionaryId}:
    get:
      tags: [document-resource]
      operationId: downloadDocument
      parameters:
      - name: documentDictionaryId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {type: string, format: binary}
  /api/email-templates:
    get:
      tags: [email-template-resource]
      operationId: getTemplates
      parameters:
      - name: pageSize
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 1}
      - name: pageNumber
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 0}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageResponseDTOEmailTemplateOverviewDTO'}
    put:
      tags: [email-template-resource]
      operationId: updateTemplate
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/EmailTemplateDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EmailTemplateDTO'}
    post:
      tags: [email-template-resource]
      operationId: createTemplate
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/EmailTemplateDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EmailTemplateDTO'}
  /api/email-templates/{templateId}:
    get:
      tags: [email-template-resource]
      operationId: getTemplate
      parameters:
      - name: templateId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EmailTemplateDTO'}
    delete:
      tags: [email-template-resource]
      operationId: deleteTemplate
      parameters:
      - name: templateId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200': {description: OK}
  /api/evaluation/application-details:
    get:
      tags: [application-evaluation-resource]
      operationId: getApplicationsDetails
      parameters:
      - name: offset
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 0}
      - name: limit
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 1}
      - name: sortBy
        in: query
        required: false
        schema: {type: string}
      - name: direction
        in: query
        required: false
        schema:
          type: string
          enum: [ASC, DESC]
      - name: status
        in: query
        required: false
        schema:
          type: array
          items: {type: string}
      - name: job
        in: query
        required: false
        schema:
          type: array
          items: {type: string}
      - name: search
        in: query
        required: false
        schema: {type: string}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ApplicationEvaluationDetailListDTO'}
  /api/evaluation/application-details/window:
    get:
      tags: [application-evaluation-resource]
      operationId: getApplicationsDetailsWindow
      parameters:
      - name: applicationId
        in: query
        required: true
        schema: {type: string, format: uuid}
      - name: windowSize
        in: query
        required: true
        schema: {type: integer, format: int32}
      - name: sortBy
        in: query
        required: false
        schema: {type: string}
      - name: direction
        in: query
        required: false
        schema:
          type: string
          enum: [ASC, DESC]
      - name: status
        in: query
        required: false
        schema:
          type: array
          items: {type: string}
      - name: job
        in: query
        required: false
        schema:
          type: array
          items: {type: string}
      - name: search
        in: query
        required: false
        schema: {type: string}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ApplicationEvaluationDetailListDTO'}
  /api/evaluation/applications:
    get:
      tags: [application-evaluation-resource]
      operationId: getApplicationsOverviews
      parameters:
      - name: offset
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 0}
      - name: limit
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 1}
      - name: sortBy
        in: query
        required: false
        schema: {type: string}
      - name: direction
        in: query
        required: false
        schema:
          type: string
          enum: [ASC, DESC]
      - name: status
        in: query
        required: false
        schema:
          type: array
          items: {type: string}
      - name: job
        in: query
        required: false
        schema:
          type: array
          items: {type: string}
      - name: search
        in: query
        required: false
        schema: {type: string}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ApplicationEvaluationOverviewListDTO'}
  /api/evaluation/applications/{applicationId}/accept:
    post:
      tags: [application-evaluation-resource]
      operationId: acceptApplication
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AcceptDTO'}
        required: true
      responses:
        '200': {description: OK}
  /api/evaluation/applications/{applicationId}/documents-download:
    get:
      tags: [application-evaluation-resource]
      operationId: downloadAll
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: ZIP file containing all documents
          content:
            application/zip:
              schema: {type: string, format: binary}
  /api/evaluation/applications/{applicationId}/open:
    put:
      tags: [application-evaluation-resource]
      operationId: markApplicationAsInReview
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200': {description: OK}
  /api/evaluation/applications/{applicationId}/reject:
    post:
      tags: [application-evaluation-resource]
      operationId: rejectApplication
      parameters:
      - name: applicationId
        in: path
        required: true
        schema: {type: string, format: uuid}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/RejectDTO'}
        required: true
      responses:
        '200': {description: OK}
  /api/evaluation/job-names:
    get:
      tags: [application-evaluation-resource]
      operationId: getAllJobNames
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {type: string}
  /api/jobs/available:
    get:
      tags: [job-resource]
      operationId: getAvailableJobs
      parameters:
      - name: pageSize
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 1}
      - name: pageNumber
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 0}
      - name: fieldOfStudies
        in: query
        required: false
        schema:
          type: array
          items: {type: string}
      - name: locations
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            enum: [GARCHING, GARCHING_HOCHBRUECK, HEILBRONN, MUNICH, STRAUBING, WEIHENSTEPHAN,
              SINGAPORE]
      - name: professorNames
        in: query
        required: false
        schema:
          type: array
          items: {type: string}
      - name: sortBy
        in: query
        required: false
        schema: {type: string}
      - name: direction
        in: query
        required: false
        schema:
          type: string
          enum: [ASC, DESC]
      - name: searchQuery
        in: query
        required: false
        schema: {type: string}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageJobCardDTO'}
  /api/jobs/changeState/{jobId}:
    put:
      tags: [job-resource]
      operationId: changeJobState
      parameters:
      - name: jobId
        in: path
        required: true
        schema: {type: string, format: uuid}
      - name: jobState
        in: query
        required: true
        schema:
          type: string
          enum: [DRAFT, PUBLISHED, CLOSED, APPLICANT_FOUND]
      - name: shouldRejectRemainingApplications
        in: query
        required: false
        schema: {type: boolean}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/JobFormDTO'}
  /api/jobs/create:
    post:
      tags: [job-resource]
      operationId: createJob
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/JobFormDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/JobFormDTO'}
  /api/jobs/detail/{jobId}:
    get:
      tags: [job-resource]
      operationId: getJobDetails
      parameters:
      - name: jobId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/JobDetailDTO'}
  /api/jobs/filters:
    get:
      tags: [job-resource]
      operationId: getAllFilters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/JobFiltersDTO'}
  /api/jobs/professor:
    get:
      tags: [job-resource]
      operationId: getJobsByProfessor
      parameters:
      - name: pageSize
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 1}
      - name: pageNumber
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 0}
      - name: states
        in: query
        required: false
        schema:
          type: array
          items: {type: string}
      - name: sortBy
        in: query
        required: false
        schema: {type: string}
      - name: direction
        in: query
        required: false
        schema:
          type: string
          enum: [ASC, DESC]
      - name: searchQuery
        in: query
        required: false
        schema: {type: string}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageCreatedJobDTO'}
  /api/jobs/update/{jobId}:
    put:
      tags: [job-resource]
      operationId: updateJob
      parameters:
      - name: jobId
        in: path
        required: true
        schema: {type: string, format: uuid}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/JobFormDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/JobFormDTO'}
  /api/jobs/{jobId}:
    get:
      tags: [job-resource]
      operationId: getJobById
      parameters:
      - name: jobId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/JobDTO'}
    delete:
      tags: [job-resource]
      operationId: deleteJob
      parameters:
      - name: jobId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200': {description: OK}
  /api/me/prof-onboarding:
    get:
      tags: [prof-onboarding-resource]
      operationId: check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ProfOnboardingDTO'}
  /api/me/prof-onboarding/confirm:
    post:
      tags: [prof-onboarding-resource]
      operationId: confirmOnboarding
      responses:
        '204': {description: No Content}
  /api/me/prof-onboarding/remind:
    post:
      tags: [prof-onboarding-resource]
      operationId: remindLater
      responses:
        '204': {description: No Content}
  /api/public/config:
    get:
      tags: [public-config-resource]
      operationId: config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
  /api/research-groups:
    get:
      tags: [research-group-resource]
      operationId: getAllResearchGroups
      parameters:
      - name: pageSize
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 1}
      - name: pageNumber
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 0}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageResponseDTOResearchGroupDTO'}
  /api/research-groups/admin:
    get:
      tags: [research-group-resource]
      operationId: getResearchGroupsForAdmin
      parameters:
      - name: pageSize
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 1}
      - name: pageNumber
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 0}
      - name: status
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            enum: [DRAFT, ACTIVE, DENIED]
      - name: searchQuery
        in: query
        required: false
        schema: {type: string}
      - name: sortBy
        in: query
        required: false
        schema: {type: string}
      - name: direction
        in: query
        required: false
        schema:
          type: string
          enum: [ASC, DESC]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageResponseDTOResearchGroupAdminDTO'}
  /api/research-groups/detail/{researchGroupId}:
    get:
      tags: [research-group-resource]
      operationId: getResourceGroupDetails
      parameters:
      - name: researchGroupId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ResearchGroupLargeDTO'}
  /api/research-groups/draft:
    get:
      tags: [research-group-resource]
      operationId: getDraftResearchGroups
      parameters:
      - name: pageSize
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 1}
      - name: pageNumber
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 0}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageResponseDTOResearchGroupDTO'}
  /api/research-groups/employee-request:
    post:
      tags: [research-group-resource]
      operationId: createEmployeeResearchGroupRequest
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/EmployeeResearchGroupRequestDTO'}
        required: true
      responses:
        '200': {description: OK}
  /api/research-groups/members:
    get:
      tags: [research-group-resource]
      operationId: getResearchGroupMembers
      parameters:
      - name: pageSize
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 1}
      - name: pageNumber
        in: query
        required: false
        schema: {type: integer, format: int32, minimum: 0}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PageResponseDTOUserShortDTO'}
  /api/research-groups/members/{userId}:
    delete:
      tags: [research-group-resource]
      operationId: removeMemberFromResearchGroup
      parameters:
      - name: userId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200': {description: OK}
  /api/research-groups/professor-request:
    post:
      tags: [research-group-resource]
      operationId: createProfessorResearchGroupRequest
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ProfessorResearchGroupRequestDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ResearchGroupDTO'}
  /api/research-groups/{id}:
    get:
      tags: [research-group-resource]
      operationId: getResearchGroup
      parameters:
      - name: id
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ResearchGroupDTO'}
    put:
      tags: [research-group-resource]
      operationId: updateResearchGroup
      parameters:
      - name: id
        in: path
        required: true
        schema: {type: string, format: uuid}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ResearchGroupDTO'}
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ResearchGroupDTO'}
  /api/research-groups/{researchGroupId}/activate:
    post:
      tags: [research-group-resource]
      operationId: activateResearchGroup
      parameters:
      - name: researchGroupId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ResearchGroupDTO'}
  /api/research-groups/{researchGroupId}/deny:
    post:
      tags: [research-group-resource]
      operationId: denyResearchGroup
      parameters:
      - name: researchGroupId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ResearchGroupDTO'}
  /api/research-groups/{researchGroupId}/withdraw:
    post:
      tags: [research-group-resource]
      operationId: withdrawResearchGroup
      parameters:
      - name: researchGroupId
        in: path
        required: true
        schema: {type: string, format: uuid}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ResearchGroupDTO'}
  /api/settings/emails:
    get:
      tags: [email-setting-resource]
      operationId: getEmailSettings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/EmailSettingDTO'}
                uniqueItems: true
    put:
      tags: [email-setting-resource]
      operationId: updateEmailSettings
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items: {$ref: '#/components/schemas/EmailSettingDTO'}
              uniqueItems: true
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/EmailSettingDTO'}
                uniqueItems: true
  /api/users/me:
    get:
      tags: [user-resource]
      operationId: getCurrentUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {$ref: '#/components/schemas/UserShortDTO'}
  /api/users/name:
    put:
      tags: [user-resource]
      operationId: updateUserName
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/UpdateUserNameDTO'}
        required: true
      responses:
        '200': {description: OK}
  /api/users/password:
    put:
      tags: [user-resource]
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/UpdatePasswordDTO'}
        required: true
      responses:
        '200': {description: OK}
components:
  schemas:
    AcceptDTO:
      type: object
      properties:
        closeJob: {type: boolean}
        message: {type: string, maxLength: 3000, minLength: 0}
        notifyApplicant: {type: boolean}
    Applicant:
      type: object
      properties:
        bachelorDegreeName: {type: string}
        bachelorGrade: {type: string}
        bachelorGradeLowerLimit: {type: string}
        bachelorGradeUpperLimit: {type: string}
        bachelorUniversity: {type: string}
        city: {type: string}
        country: {type: string}
        masterDegreeName: {type: string}
        masterGrade: {type: string}
        masterGradeLowerLimit: {type: string}
        masterGradeUpperLimit: {type: string}
        masterUniversity: {type: string}
        postalCode: {type: string}
        street: {type: string}
        submittedApplications:
          type: array
          items: {$ref: '#/components/schemas/Application'}
          uniqueItems: true
        user: {$ref: '#/components/schemas/User'}
        userId: {type: string, format: uuid}
    ApplicantDTO:
      type: object
      properties:
        bachelorDegreeName: {type: string}
        bachelorGrade: {type: string}
        bachelorGradeLowerLimit: {type: string}
        bachelorGradeUpperLimit: {type: string}
        bachelorUniversity: {type: string}
        city: {type: string}
        country: {type: string}
        masterDegreeName: {type: string}
        masterGrade: {type: string}
        masterGradeLowerLimit: {type: string}
        masterGradeUpperLimit: {type: string}
        masterUniversity: {type: string}
        postalCode: {type: string}
        street: {type: string}
        user: {$ref: '#/components/schemas/UserDTO'}
      required: [user]
    ApplicantForApplicationDetailDTO:
      type: object
      properties:
        bachelorDegreeName: {type: string}
        bachelorGrade: {type: string}
        bachelorGradeLowerLimit: {type: string}
        bachelorGradeUpperLimit: {type: string}
        bachelorUniversity: {type: string}
        masterDegreeName: {type: string}
        masterGrade: {type: string}
        masterGradeLowerLimit: {type: string}
        masterGradeUpperLimit: {type: string}
        masterUniversity: {type: string}
        user: {$ref: '#/components/schemas/UserForApplicationDetailDTO'}
      required: [user]
    Application:
      type: object
      properties:
        applicant: {$ref: '#/components/schemas/Applicant'}
        applicationId: {type: string, format: uuid}
        applicationReview: {$ref: '#/components/schemas/ApplicationReview'}
        appliedAt: {type: string, format: date-time}
        createdAt: {type: string, format: date-time}
        customFieldAnswers:
          type: array
          items: {$ref: '#/components/schemas/CustomFieldAnswer'}
          uniqueItems: true
        desiredStartDate: {type: string, format: date}
        internalComments:
          type: array
          items: {$ref: '#/components/schemas/InternalComment'}
          uniqueItems: true
        job: {}
        lastModifiedAt: {type: string, format: date-time}
        motivation: {type: string}
        projects: {type: string}
        specialSkills: {type: string}
        state:
          type: string
          enum: [SAVED, SENT, ACCEPTED, IN_REVIEW, REJECTED, WITHDRAWN, JOB_CLOSED]
    ApplicationDetailDTO:
      type: object
      properties:
        applicant: {$ref: '#/components/schemas/ApplicantForApplicationDetailDTO'}
        applicationId: {type: string, format: uuid}
        applicationState:
          type: string
          enum: [SAVED, SENT, ACCEPTED, IN_REVIEW, REJECTED, WITHDRAWN, JOB_CLOSED]
        desiredDate: {type: string, format: date}
        jobId: {type: string, format: uuid}
        jobLocation: {type: string}
        jobTitle: {type: string}
        motivation: {type: string}
        projects: {type: string}
        researchGroup: {type: string}
        specialSkills: {type: string}
        supervisingProfessorName: {type: string}
      required: [applicationId, applicationState, jobId, researchGroup, supervisingProfessorName]
    ApplicationDocumentIdsDTO:
      type: object
      properties:
        bachelorDocumentDictionaryIds:
          type: array
          items: {$ref: '#/components/schemas/DocumentInformationHolderDTO'}
          uniqueItems: true
        cvDocumentDictionaryId: {$ref: '#/components/schemas/DocumentInformationHolderDTO'}
        masterDocumentDictionaryIds:
          type: array
          items: {$ref: '#/components/schemas/DocumentInformationHolderDTO'}
          uniqueItems: true
        referenceDocumentDictionaryIds:
          type: array
          items: {$ref: '#/components/schemas/DocumentInformationHolderDTO'}
          uniqueItems: true
    ApplicationEvaluationDetailDTO:
      type: object
      properties:
        applicationDetailDTO: {$ref: '#/components/schemas/ApplicationDetailDTO'}
        appliedAt: {type: string, format: date-time}
        jobId: {type: string, format: uuid}
        professor: {$ref: '#/components/schemas/ProfessorDTO'}
      required: [applicationDetailDTO]
    ApplicationEvaluationDetailListDTO:
      type: object
      properties:
        applications:
          type: array
          items: {$ref: '#/components/schemas/ApplicationEvaluationDetailDTO'}
        currentIndex: {type: integer, format: int32}
        totalRecords: {type: integer, format: int64}
        windowIndex: {type: integer, format: int32}
    ApplicationEvaluationOverviewDTO:
      type: object
      properties:
        applicationId: {type: string, format: uuid}
        appliedAt: {type: string, format: date-time}
        avatar: {type: string}
        jobName: {type: string}
        name: {type: string}
        state:
          type: string
          enum: [SAVED, SENT, ACCEPTED, IN_REVIEW, REJECTED, WITHDRAWN, JOB_CLOSED]
    ApplicationEvaluationOverviewListDTO:
      type: object
      properties:
        applications:
          type: array
          items: {$ref: '#/components/schemas/ApplicationEvaluationOverviewDTO'}
        totalRecords: {type: integer, format: int64}
    ApplicationForApplicantDTO:
      type: object
      properties:
        applicant: {$ref: '#/components/schemas/ApplicantDTO'}
        applicationId: {type: string, format: uuid}
        applicationState:
          type: string
          enum: [SAVED, SENT, ACCEPTED, IN_REVIEW, REJECTED, WITHDRAWN, JOB_CLOSED]
        customFields:
          type: array
          items: {$ref: '#/components/schemas/CustomFieldAnswerDTO'}
          uniqueItems: true
        desiredDate: {type: string, format: date}
        job: {$ref: '#/components/schemas/JobCardDTO'}
        motivation: {type: string}
        projects: {type: string}
        specialSkills: {type: string}
      required: [applicationState, job]
    ApplicationOverviewDTO:
      type: object
      properties:
        applicationId: {type: string, format: uuid}
        applicationState:
          type: string
          enum: [SAVED, SENT, ACCEPTED, IN_REVIEW, REJECTED, WITHDRAWN, JOB_CLOSED]
        jobId: {type: string, format: uuid}
        jobTitle: {type: string}
        researchGroup: {type: string}
        timeSinceCreation: {type: string}
    ApplicationReview:
      type: object
      properties:
        application: {$ref: '#/components/schemas/Application'}
        applicationReviewId: {type: string, format: uuid}
        reason: {type: string}
        reviewedAt: {type: string, format: date-time}
        reviewedBy: {$ref: '#/components/schemas/User'}
    AuthSessionInfoDTO:
      type: object
      properties:
        expiresIn: {type: integer, format: int64}
        profileRequired: {type: boolean}
        refreshExpiresIn: {type: integer, format: int64}
    CreatedJobDTO:
      type: object
      properties:
        avatar: {type: string}
        createdAt: {type: string, format: date-time}
        jobId: {type: string, format: uuid}
        lastModifiedAt: {type: string, format: date-time}
        professorName: {type: string}
        startDate: {type: string, format: date}
        state:
          type: string
          enum: [DRAFT, PUBLISHED, CLOSED, APPLICANT_FOUND]
        title: {type: string}
      required: [jobId, title]
    CustomField:
      type: object
      properties:
        answerOptions:
          type: array
          items: {type: string}
        customFieldAnswers:
          type: array
          items: {$ref: '#/components/schemas/CustomFieldAnswer'}
          uniqueItems: true
        customFieldId: {type: string, format: uuid}
        customFieldType:
          type: string
          enum: [FREE_TEXT, SINGLE_CHOICE, MULTIPLE_CHOICE, FILE_UPLOAD]
        job: {$ref: '#/components/schemas/Job'}
        question: {type: string}
        required: {type: boolean}
        sequence: {type: integer, format: int32}
    CustomFieldAnswer:
      type: object
      properties:
        answers:
          type: array
          items: {type: string}
        application: {$ref: '#/components/schemas/Application'}
        customField: {$ref: '#/components/schemas/CustomField'}
        customFieldAnswerId: {type: string, format: uuid}
    CustomFieldAnswerDTO:
      type: object
      properties:
        answers:
          type: array
          items: {type: string}
        customField: {$ref: '#/components/schemas/CustomFieldDTO'}
        customFieldAnswerId: {type: string, format: uuid}
        documents:
          type: array
          items: {$ref: '#/components/schemas/DocumentDTO'}
    CustomFieldDTO: {}
    DocumentDTO: {}
    DocumentInformationHolderDTO:
      type: object
      properties:
        id: {type: string, format: uuid}
        name: {type: string}
        size: {type: integer, format: int64}
      required: [id, size]
    EmailSetting:
      type: object
      properties:
        emailSettingId: {type: string, format: uuid}
        emailType:
          type: string
          enum: [APPLICATION_ACCEPTED, APPLICATION_REJECTED, APPLICATION_RECEIVED,
            APPLICATION_SENT, APPLICATION_WITHDRAWN]
        enabled: {type: boolean}
        user: {$ref: '#/components/schemas/User'}
    EmailSettingDTO:
      type: object
      properties:
        emailType:
          type: string
          enum: [APPLICATION_ACCEPTED, APPLICATION_REJECTED, APPLICATION_RECEIVED,
            APPLICATION_SENT, APPLICATION_WITHDRAWN]
        enabled: {type: boolean}
    EmailTemplateDTO:
      type: object
      properties:
        emailTemplateId: {type: string, format: uuid}
        emailType:
          type: string
          enum: [APPLICATION_ACCEPTED, APPLICATION_REJECTED, APPLICATION_RECEIVED,
            APPLICATION_SENT, APPLICATION_WITHDRAWN]
        english: {$ref: '#/components/schemas/EmailTemplateTranslationDTO'}
        german: {$ref: '#/components/schemas/EmailTemplateTranslationDTO'}
        isDefault: {type: boolean}
        templateName: {type: string}
    EmailTemplateOverviewDTO:
      type: object
      properties:
        emailTemplateId: {type: string, format: uuid}
        emailType:
          type: string
          enum: [APPLICATION_ACCEPTED, APPLICATION_REJECTED, APPLICATION_RECEIVED,
            APPLICATION_SENT, APPLICATION_WITHDRAWN]
        firstName: {type: string}
        isDefault: {type: boolean}
        lastName: {type: string}
        templateName: {type: string}
    EmailTemplateTranslationDTO:
      type: object
      properties:
        body: {type: string}
        subject: {type: string}
    EmployeeResearchGroupRequestDTO:
      type: object
      properties:
        professorName: {type: string, minLength: 1}
      required: [professorName]
    InternalComment:
      type: object
      properties:
        application: {}
        createdAt: {type: string, format: date-time}
        createdBy: {$ref: '#/components/schemas/User'}
        internalCommentId: {type: string, format: uuid}
        lastModifiedAt: {type: string, format: date-time}
        message: {type: string}
    InternalCommentDTO:
      type: object
      properties:
        author: {type: string}
        canEdit: {type: boolean}
        commentId: {type: string, format: uuid}
        createdAt: {type: string, format: date-time}
        message: {type: string}
    InternalCommentUpdateDTO:
      type: object
      properties:
        message: {type: string, maxLength: 500, minLength: 0}
      required: [message]
    Job:
      type: object
      properties:
        applications:
          type: array
          items: {$ref: '#/components/schemas/Application'}
          uniqueItems: true
        contractDuration: {type: integer, format: int32}
        createdAt: {type: string, format: date-time}
        customFields:
          type: array
          items: {$ref: '#/components/schemas/CustomField'}
        description: {type: string}
        endDate: {type: string, format: date}
        fieldOfStudies: {type: string}
        fundingType:
          type: string
          enum: [FULLY_FUNDED, PARTIALLY_FUNDED, SCHOLARSHIP, SELF_FUNDED, INDUSTRY_SPONSORED,
            GOVERNMENT_FUNDED, RESEARCH_GRANT]
        jobId: {type: string, format: uuid}
        lastModifiedAt: {type: string, format: date-time}
        location:
          type: string
          enum: [GARCHING, GARCHING_HOCHBRUECK, HEILBRONN, MUNICH, STRAUBING, WEIHENSTEPHAN,
            SINGAPORE]
        requirements: {type: string}
        researchArea: {type: string}
        researchGroup: {$ref: '#/components/schemas/ResearchGroup'}
        startDate: {type: string, format: date}
        state:
          type: string
          enum: [DRAFT, PUBLISHED, CLOSED, APPLICANT_FOUND]
        supervisingProfessor: {$ref: '#/components/schemas/User'}
        tasks: {type: string}
        title: {type: string}
        workload: {type: integer, format: int32}
    JobCardDTO:
      type: object
      properties:
        applicationId: {type: string, format: uuid}
        applicationState:
          type: string
          enum: [SAVED, SENT, ACCEPTED, IN_REVIEW, REJECTED, WITHDRAWN, JOB_CLOSED]
        fieldOfStudies: {type: string}
        jobId: {type: string, format: uuid}
        location: {type: string}
        professorName: {type: string}
        relativeTimeEnglish: {type: string}
        relativeTimeGerman: {type: string}
        startDate: {type: string, format: date}
        title: {type: string}
        workload: {type: integer, format: int32}
      required: [fieldOfStudies, jobId, location, professorName, title]
    JobDTO:
      type: object
      properties:
        contractDuration: {type: integer, format: int32}
        description: {type: string}
        endDate: {type: string, format: date}
        fieldOfStudies: {type: string}
        fundingType:
          type: string
          enum: [FULLY_FUNDED, PARTIALLY_FUNDED, SCHOLARSHIP, SELF_FUNDED, INDUSTRY_SPONSORED,
            GOVERNMENT_FUNDED, RESEARCH_GRANT]
        jobId: {type: string, format: uuid}
        location:
          type: string
          enum: [GARCHING, GARCHING_HOCHBRUECK, HEILBRONN, MUNICH, STRAUBING, WEIHENSTEPHAN,
            SINGAPORE]
        requirements: {type: string}
        researchArea: {type: string}
        startDate: {type: string, format: date}
        state:
          type: string
          enum: [DRAFT, PUBLISHED, CLOSED, APPLICANT_FOUND]
        supervisingProfessor: {type: string, format: uuid}
        tasks: {type: string}
        title: {type: string}
        workload: {type: integer, format: int32}
      required: [jobId, state, supervisingProfessor, title]
    JobDetailDTO:
      type: object
      properties:
        applicationId: {type: string, format: uuid}
        applicationState:
          type: string
          enum: [SAVED, SENT, ACCEPTED, IN_REVIEW, REJECTED, WITHDRAWN, JOB_CLOSED]
        contractDuration: {type: integer, format: int32}
        createdAt: {type: string, format: date-time}
        description: {type: string}
        endDate: {type: string, format: date}
        fieldOfStudies: {type: string}
        fundingType: {type: string}
        jobId: {type: string, format: uuid}
        lastModifiedAt: {type: string, format: date-time}
        location: {type: string}
        requirements: {type: string}
        researchArea: {type: string}
        researchGroup: {$ref: '#/components/schemas/ResearchGroup'}
        startDate: {type: string, format: date}
        state:
          type: string
          enum: [DRAFT, PUBLISHED, CLOSED, APPLICANT_FOUND]
        supervisingProfessorName: {type: string}
        tasks: {type: string}
        title: {type: string}
        workload: {type: integer, format: int32}
      required: [createdAt, jobId, lastModifiedAt, researchGroup, supervisingProfessorName,
        title]
    JobFiltersDTO:
      type: object
      properties:
        fieldsOfStudy:
          type: array
          items: {type: string}
        supervisorNames:
          type: array
          items: {type: string}
    JobFormDTO:
      type: object
      properties:
        contractDuration: {type: integer, format: int32}
        description: {type: string}
        endDate: {type: string, format: date}
        fieldOfStudies: {type: string}
        fundingType:
          type: string
          enum: [FULLY_FUNDED, PARTIALLY_FUNDED, SCHOLARSHIP, SELF_FUNDED, INDUSTRY_SPONSORED,
            GOVERNMENT_FUNDED, RESEARCH_GRANT]
        jobId: {type: string, format: uuid}
        location:
          type: string
          enum: [GARCHING, GARCHING_HOCHBRUECK, HEILBRONN, MUNICH, STRAUBING, WEIHENSTEPHAN,
            SINGAPORE]
        requirements: {type: string}
        researchArea: {type: string}
        startDate: {type: string, format: date}
        state:
          type: string
          enum: [DRAFT, PUBLISHED, CLOSED, APPLICANT_FOUND]
        supervisingProfessor: {type: string, format: uuid}
        tasks: {type: string}
        title: {type: string}
        workload: {type: integer, format: int32}
      required: [fieldOfStudies, location, state, supervisingProfessor, title]
    LoginRequestDTO:
      type: object
      properties:
        email: {type: string, format: email, minLength: 1}
        password: {type: string, minLength: 1}
      required: [email, password]
    MultipartUploadRequest:
      type: object
      properties:
        files:
          type: array
          format: binary
          description: List of documents to upload
          items: {type: string, format: binary}
    OtpCompleteDTO:
      type: object
      properties:
        code: {type: string, minLength: 1}
        email: {type: string, format: email, minLength: 1}
        profile: {$ref: '#/components/schemas/UserProfileDTO'}
        purpose:
          type: string
          enum: [LOGIN, REGISTER]
      required: [code, email, purpose]
    PageCreatedJobDTO:
      type: object
      properties:
        content:
          type: array
          items: {$ref: '#/components/schemas/CreatedJobDTO'}
        empty: {type: boolean}
        first: {type: boolean}
        last: {type: boolean}
        number: {type: integer, format: int32}
        numberOfElements: {type: integer, format: int32}
        pageable: {$ref: '#/components/schemas/PageableObject'}
        size: {type: integer, format: int32}
        sort: {$ref: '#/components/schemas/SortObject'}
        totalElements: {type: integer, format: int64}
        totalPages: {type: integer, format: int32}
    PageJobCardDTO:
      type: object
      properties:
        content:
          type: array
          items: {$ref: '#/components/schemas/JobCardDTO'}
        empty: {type: boolean}
        first: {type: boolean}
        last: {type: boolean}
        number: {type: integer, format: int32}
        numberOfElements: {type: integer, format: int32}
        pageable: {$ref: '#/components/schemas/PageableObject'}
        size: {type: integer, format: int32}
        sort: {$ref: '#/components/schemas/SortObject'}
        totalElements: {type: integer, format: int64}
        totalPages: {type: integer, format: int32}
    PageResponseDTOEmailTemplateOverviewDTO:
      type: object
      properties:
        content:
          type: array
          items: {$ref: '#/components/schemas/EmailTemplateOverviewDTO'}
        totalElements: {type: integer, format: int64}
    PageResponseDTOResearchGroupAdminDTO:
      type: object
      properties:
        content:
          type: array
          items: {$ref: '#/components/schemas/ResearchGroupAdminDTO'}
        totalElements: {type: integer, format: int64}
    PageResponseDTOResearchGroupDTO:
      type: object
      properties:
        content:
          type: array
          items: {$ref: '#/components/schemas/ResearchGroupDTO'}
        totalElements: {type: integer, format: int64}
    PageResponseDTOUserShortDTO:
      type: object
      properties:
        content:
          type: array
          items: {$ref: '#/components/schemas/UserShortDTO'}
        totalElements: {type: integer, format: int64}
    PageableObject:
      type: object
      properties:
        offset: {type: integer, format: int64}
        pageNumber: {type: integer, format: int32}
        pageSize: {type: integer, format: int32}
        paged: {type: boolean}
        sort: {$ref: '#/components/schemas/SortObject'}
        unpaged: {type: boolean}
    ProfOnboardingDTO:
      type: object
      properties:
        show: {type: boolean}
    ProfessorDTO:
      type: object
      properties:
        email: {type: string}
        firstName: {type: string}
        lastName: {type: string}
        researchGroupName: {type: string}
        researchGroupWebsite: {type: string}
    ProfessorResearchGroupRequestDTO:
      type: object
      properties:
        abbreviation: {type: string}
        city: {type: string}
        contactEmail: {type: string}
        defaultFieldOfStudies: {type: string}
        description: {type: string}
        firstName: {type: string}
        lastName: {type: string}
        postalCode: {type: string}
        researchGroupHead: {type: string}
        researchGroupName: {type: string}
        school: {type: string}
        street: {type: string}
        title: {type: string}
        universityId: {type: string}
        website: {type: string}
    RatingDTO:
      type: object
      properties:
        from: {type: string}
        rating: {type: integer, format: int32}
    RatingOverviewDTO:
      type: object
      properties:
        currentUserRating: {type: integer, format: int32}
        otherRatings:
          type: array
          items: {$ref: '#/components/schemas/RatingDTO'}
          uniqueItems: true
    RejectDTO:
      type: object
      properties:
        notifyApplicant: {type: boolean}
        reason:
          type: string
          enum: [JOB_FILLED, JOB_OUTDATED, FAILED_REQUIREMENTS, OTHER_REASON]
      required: [reason]
    ResearchGroup:
      type: object
      properties:
        abbreviation: {type: string}
        city: {type: string}
        createdAt: {type: string, format: date-time}
        defaultFieldOfStudies: {type: string}
        description: {type: string}
        email: {type: string}
        head: {type: string}
        lastModifiedAt: {type: string, format: date-time}
        name: {type: string}
        postalCode: {type: string}
        researchGroupId: {type: string, format: uuid}
        school: {type: string}
        state:
          type: string
          enum: [DRAFT, ACTIVE, DENIED]
        street: {type: string}
        universityId: {type: string}
        userRoles:
          type: array
          items: {$ref: '#/components/schemas/UserResearchGroupRole'}
          uniqueItems: true
        website: {type: string}
    ResearchGroupAdminDTO:
      type: object
      properties:
        createdAt: {type: string, format: date-time}
        id: {type: string, format: uuid}
        professorName: {type: string}
        researchGroup: {type: string}
        status:
          type: string
          enum: [DRAFT, ACTIVE, DENIED]
    ResearchGroupDTO:
      type: object
      properties:
        abbreviation: {type: string}
        city: {type: string}
        defaultFieldOfStudies: {type: string}
        description: {type: string}
        email: {type: string, format: email}
        head: {type: string, minLength: 1}
        name: {type: string, minLength: 1}
        postalCode: {type: string}
        school: {type: string}
        state:
          type: string
          enum: [DRAFT, ACTIVE, DENIED]
        street: {type: string}
        website: {type: string}
      required: [head, name]
    ResearchGroupLargeDTO:
      type: object
      properties:
        city: {type: string}
        description: {type: string}
        email: {type: string}
        postalCode: {type: string}
        street: {type: string}
        website: {type: string}
    ResearchGroupProvisionDTO:
      type: object
      properties:
        researchGroupId: {type: string, format: uuid}
        universityId: {type: string, maxLength: 7, minLength: 3}
      required: [universityId]
    ResearchGroupShortDTO:
      type: object
      properties:
        name: {type: string}
        researchGroupId: {type: string, format: uuid}
    SendCodeRequest:
      type: object
      properties:
        email: {type: string, format: email, minLength: 1}
        registration: {type: boolean}
      required: [email]
    SortObject:
      type: object
      properties:
        empty: {type: boolean}
        sorted: {type: boolean}
        unsorted: {type: boolean}
    UpdateApplicationDTO:
      type: object
      properties:
        applicant: {$ref: '#/components/schemas/ApplicantDTO'}
        applicationId: {type: string, format: uuid}
        applicationState:
          type: string
          enum: [SAVED, SENT, ACCEPTED, IN_REVIEW, REJECTED, WITHDRAWN, JOB_CLOSED]
        desiredDate: {type: string, format: date}
        motivation: {type: string}
        projects: {type: string}
        specialSkills: {type: string}
      required: [applicant, applicationId, applicationState]
    UpdatePasswordDTO:
      type: object
      properties:
        newPassword: {type: string, minLength: 1}
      required: [newPassword]
    UpdateUserNameDTO:
      type: object
      properties:
        firstName: {type: string}
        lastName: {type: string}
      required: [firstName, lastName]
    User:
      type: object
      properties:
        avatar: {type: string}
        birthday: {type: string, format: date}
        createdAt: {type: string, format: date-time}
        email: {type: string}
        emailSettings:
          type: array
          items: {$ref: '#/components/schemas/EmailSetting'}
          uniqueItems: true
        firstName: {type: string}
        gender: {type: string}
        lastModifiedAt: {type: string, format: date-time}
        lastName: {type: string}
        linkedinUrl: {type: string}
        nationality: {type: string}
        phoneNumber: {type: string}
        postedJobs:
          type: array
          items: {$ref: '#/components/schemas/Job'}
          uniqueItems: true
        researchGroup: {$ref: '#/components/schemas/ResearchGroup'}
        researchGroupRoles:
          type: array
          items: {$ref: '#/components/schemas/UserResearchGroupRole'}
          uniqueItems: true
        selectedLanguage: {type: string}
        universityId: {type: string}
        userId: {type: string, format: uuid}
        website: {type: string}
    UserDTO:
      type: object
      properties:
        avatar: {type: string}
        birthday: {type: string, format: date}
        email: {type: string}
        firstName: {type: string}
        gender: {type: string}
        lastName: {type: string}
        linkedinUrl: {type: string}
        nationality: {type: string}
        phoneNumber: {type: string}
        researchGroupShortDTO: {$ref: '#/components/schemas/ResearchGroupShortDTO'}
        selectedLanguage: {type: string}
        userId: {type: string, format: uuid}
        website: {type: string}
    UserForApplicationDetailDTO:
      type: object
      properties:
        avatar: {type: string}
        birthday: {type: string, format: date}
        email: {type: string}
        gender: {type: string}
        linkedinUrl: {type: string}
        name: {type: string}
        nationality: {type: string}
        phoneNumber: {type: string}
        preferredLanguage: {type: string}
        userId: {type: string, format: uuid}
        website: {type: string}
      required: [userId]
    UserProfileDTO:
      type: object
      properties:
        firstName: {type: string}
        lastName: {type: string}
    UserResearchGroupRole:
      type: object
      properties:
        researchGroup: {$ref: '#/components/schemas/ResearchGroup'}
        role:
          type: string
          enum: [APPLICANT, PROFESSOR, ADMIN]
        user: {$ref: '#/components/schemas/User'}
        userResearchGroupRoleId: {type: string, format: uuid}
    UserShortDTO:
      type: object
      properties:
        email: {type: string}
        firstName: {type: string}
        lastName: {type: string}
        researchGroup: {$ref: '#/components/schemas/ResearchGroupShortDTO'}
        roles:
          type: array
          items:
            type: string
            enum: [APPLICANT, PROFESSOR, ADMIN]
        userId: {type: string, format: uuid}
